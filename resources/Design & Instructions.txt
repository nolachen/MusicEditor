IMusicEditorModel is the interface with public methods: add, remove, playSimultaneously,
playConsecutively, getAllNotes, getNotesAtBeat, length, and getTempo.

MusicEditorModel is the model class that implements IMusicEditorModel.
It contains a TreeMap from beat number to a list of notes playing at that beat.

Note represents a musical note with pitch, octave, start beat, duration, instrument, and volume.
The instrument and volume fields were added to support MIDI.
Note has several constructors, including one to construct notes from the data in the text files,
and a convenience constructor that initializes the instrument and volume to a constant.

To implement our views, we made a ViewModel to give data to the View without giving it direct
access to the Model. The ViewModel has several helpful methods to transfer data to the View,
including getNotesAtBeat, length (in beats), and getNoteRange (a list of strings of the range of
pitches).

We also made sure that any method in the model interface that would return lists of notes would
return an unmodifiable list and also, we created a wrapper class for Note called ImmutableNote so
 that it could not be changed.

For the text view, we initialized an arraylist of arraylists of empty strings, and placed the
existing notes accordingly.

For the GUI view, we created a custom JPanel for the notes grid, and a JPanel for the pitches on
the left side. We put these both into another JPanel and added it into a scrollpane. The notes
grid is drawn by placing rectangles where each note belongs, and then drawing the entire measure
grid on top.

For the midi view, we used a synchronizer with a receiver and sent out messages directly to the
receiver without using a sequencer. For each note in the viewModel, we wrote it in a start and
stop message format to give to the synchronizer to play. The view contains a hashmap of
instrument to channel so we can easily assign and keep track of the instruments at each channel.

DESIGN CHANGES:

We used a sequencer in HW07 to implement pausing in the MidiView, because a sequencer could easily store the notes and start/stop playing them.

We decided to change our model to store each note at every beat it is played instead of just the start note. This makes it easier to know what notes are playing at each beats.

We changed our GUI to only draw the notes and measures that are currently on the screen, making it more efficient to load large songs.

We also made our view model an interface instead of a concrete class so that there would be looser coupling between the view and viewmodel.


INSTRUCTIONS:
Click a note to select it (the selected note is stored in the view model). Press R to remove the selected note. Click on anything that isn’t a note to de-select.

Use the text panel at the bottom of the window to add notes. Add notes in by typing in the specified format in the text bar.

Use the HOME & END keys to navigate to the beginning and end of a song.

Use the arrow keys to scroll in all directions.

In the composite view, use SPACE BAR to pause/play. At the end of a song, you can use space bar to jump back to the beginning.

JAR INSTRUCTIONS:
Navigate to the resources folder with the MusicEditor.jar and any music text files you want to use. Type: java -jar MusicEditor.jar “filename.txt” “view type”

The view types are: visual, midi, console, composite, provider
“provider” uses the composite view given to us for HW8.